type: edu
custom_name: I Like to Move It!
files:
- name: tetris/game.py
  visible: true
  text: |
    # Write your code here
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest, List
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult


    class Tetris(StageTest):
        def generate(self) -> List[TestCase]:
            return [
                TestCase(stdin='I\n10 20\nrotate\nright\nright\ndown\nrotate\nleft\nleft\nexit',
                         attach=('',
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - 0 - - - - -\n- - - - 0 - - - - -\n- - - - 0 - - - - -\n- - - - 0 - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - 0 0 0 0 - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - 0 0 0 0 - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - 0 0 0 0 -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - 0 0 0 0 -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - 0 - - -\n- - - - - - 0 - - -\n- - - - - - 0 - - -\n- - - - - - 0 - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - 0 - - - -\n- - - - - 0 - - - -\n- - - - - 0 - - - -\n- - - - - 0 - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - 0 - - - - -\n- - - - 0 - - - - -\n- - - - 0 - - - - -\n'
                                 '- - - - 0 - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 )),
                TestCase(stdin='T\n10 24\nleft\nleft\nrotate\nright\nrotate\nexit',
                         attach=('',
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - 0 - - - - -\n- - - - 0 0 - - - -\n- - - - 0 - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - 0 - - - - - -\n- - - 0 0 - - - - -\n- - - 0 - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - 0 - - - - - - -\n- - 0 0 - - - - - -\n- - 0 - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - 0 - - - - - - -\n- 0 0 0 - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - 0 - - - - - -\n'
                                 '- - 0 0 0 - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - 0 - - - - -\n- - - 0 0 - - - - -\n- - - - 0 - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n')),
                TestCase(stdin='L\n10 10\nrotate\nrotate\nexit',
                         attach=('',
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - 0 - - - - -\n- - - - 0 - - - - -\n- - - - 0 0 - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - 0 - - - -\n- - - 0 0 0 - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - 0 0 - - - -\n- - - - - 0 - - - -\n- - - - - 0 - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n')),

                TestCase(stdin='Z\n10 8\nexit',
                         attach=('',
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - 0 0 - - - -\n- - - - - 0 0 - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n')),

                TestCase(stdin='T\n10 8\nrotate\nrotate\nrotate\nrotate\nexit',
                         attach=('',
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - 0 - - - - -\n- - - - 0 0 - - - -\n- - - - 0 - - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - 0 - - - - -\n- - - 0 0 0 - - - -\n- - - - - - - - - -\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - 0 - - - -\n- - - - 0 0 - - - -\n'
                                 '- - - - - 0 - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - 0 0 0 - - -\n'
                                 '- - - - - 0 - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n\n'
                                 '- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n- - - - - - - - - -\n'
                                 '- - - - 0 - - - - -\n- - - - 0 0 - - - -\n- - - - 0 - - - - -\n- - - - - - - - - -\n\n'
                                 ))

            ]

        def check(self, reply: str, attach):

            feedback, answer = attach

            board = answer.strip().split('\n\n')
            reply_board = reply.strip().split('\n\n')

            if len(board) != len(reply_board):
                return CheckResult.wrong(
                    "A field with {0} grids is expected to be printed. Found {1} grids".format(len(board),
                                                                                               len(reply_board)))

            line = [grid.strip().split('\n') for grid in board]
            line_reply = [grid.strip().split('\n') for grid in reply_board]

            if len(line) != len(line_reply):
                return CheckResult.wrong(
                    "A grid with {0} rows is expected to be printed. Found {1} rows".format(len(line), len(line_reply)))

            for j in range(len(line)):
                line_columns = [one.strip().split(' ') for one in line[j]]
                reply_columns = [one.strip().split(' ') for one in line_reply[j]]

                if len(line_columns) != len(reply_columns):
                    return CheckResult.wrong(
                        f"A grid with {line_columns} columns is expected to be printed. Found {reply_columns} columns")

                for one_line in reply_columns:
                    for symbol in one_line:
                        if symbol not in ('0', '-'):
                            return CheckResult.wrong(
                                "The field should contain zero (0) or short-dash (-) symbols. Found {}".format(symbol))

            for i in range(len(reply_board)):
                reply_board_per_line = reply_board[i].strip().split('\n')
                answer_board_per_line = board[i].split('\n')

                for j in range(len(reply_board_per_line)):
                    if reply_board_per_line[j].endswith(' '):
                        reply_board_per_line[j] = reply_board_per_line[j].rstrip()
                    try:
                        if reply_board_per_line[j] != answer_board_per_line[j]:
                            return CheckResult.wrong(
                                f"Wrong line {j + 1} in grid {i + 1}: Should be {answer_board_per_line[j]} instead of {reply_board_per_line[j]}")
                    except IndexError:
                        return CheckResult.wrong('Seems like the size of the grid is incorrect')

            return CheckResult.correct()


    if __name__ == '__main__':
        Tetris('tetris.game').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import Tetris

    if __name__ == '__main__':
        Tetris('tetris.game').run_tests()
  learner_created: false
- name: tetris/board.py
  visible: true
  text: |
    from typing import List

    import numpy as np

    FIGURES = {
        'O': [[5, 6, 9, 10]],
        'I': [[1, 5, 9, 13], [4, 5, 6, 7]],
        'S': [[6, 5, 9, 8], [5, 9, 10, 14]],
        'Z': [[4, 5, 9, 10], [2, 5, 6, 9]],
        'L': [[1, 5, 9, 10], [2, 4, 5, 6], [1, 2, 6, 10], [4, 5, 6, 8]],
        'J': [[2, 6, 9, 10], [4, 5, 6, 10], [1, 2, 5, 9], [0, 4, 5, 6]],
        'T': [[1, 5, 6, 9], [1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9]]
    }
    FIGURES_2 = {
        'O': [[4, 14, 15, 5]],
        'I': [[4, 14, 24, 34], [3, 4, 5, 6]],
        'S': [[5, 4, 14, 13], [4, 14, 15, 25]],
        'Z': [[5, 4, 14, 13], [4, 14, 15, 25]],
        'L': [[4, 14, 24, 25], [5, 15, 14, 13], [4, 5, 15, 25], [6, 5, 4, 14]],
        'J': [[5, 15, 25, 24], [15, 5, 4, 3], [5, 4, 14, 24], [4, 14, 15, 16]],
        'T': [[4, 14, 24, 15], [4, 13, 14, 15], [5, 15, 25, 14], [4, 5, 6, 15]]

    }
    EMPTY_A = np.array([[0] * 4] * 4)
    SYM_MAP = ['-', '0']
    MOVE_MAP = {'left': -1,
                'right': 1}


    class Figure:
        def __init__(self, name: str, w: int, h: int):
            self._w = w
            self._h = h + 4
            self._rotate = 0
            self.arrays: List[np.ndarray] = self._ini_transform_into_arrays(FIGURES_2[name])

        def _ini_transform_into_arrays(self, lists: List[List[int]]) -> List[np.ndarray]:
            arrays = []
            for lst in lists:
                array = np.array([[0] * self._w] * self._h)
                for num in lst:
                    array[divmod(num, self._w)] = 1
                arrays.append(array)
            return arrays

        def shift_w(self, shift: int):
            permutation = [(n + self._w - shift) % self._w for n in range(self._w)]
            self.arrays = [a[:, permutation] for a in self.arrays]
            self.move_down()

        def rotate(self):
            self._rotate = (self._rotate + 1) % len(self.arrays)
            self.move_down()

        def move_down(self):
            for a in self.arrays:
                for row_num in range(self._h - 1, 0, -1):
                    a[row_num] = a[row_num - 1]
                a[0] = np.array([0] * self._w)

        @property
        def state(self) -> np.ndarray:
            return self.arrays[self._rotate]


    class Board:
        def __init__(self, w: int, h: int):
            self._w = w
            self._h = h
            self.array = np.array([[0] * w] * h)
            self.array_f = self.array  # the copy for rendering with the current figure
            self.figure: Figure | None = None

        def put_figure(self, fg_name: str):
            self.figure = Figure(fg_name, self._w, self._h)
            self._bg_render()

        def _bg_render(self):
            """
            Make a copy from the static array and paint the current figure on it
            """
            self.array_f = np.copy(self.array)
            figure = self.figure.state
            for row_num in range(self._h):
                self.array_f[row_num] = figure[row_num]

        def rotate(self):
            self.figure.rotate()
            self._bg_render()

        def move(self, shift: str):
            self.figure.shift_w(MOVE_MAP[shift])
            self._bg_render()

        def down(self):
            self.figure.move_down()
            self._bg_render()

        def __str__(self):
            return '\n'.join(' '.join(SYM_MAP[num] for num in row)
                             for row in self.array_f)
  learner_created: true
feedback_link: https://hyperskill.org/projects/147/stages/792/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 17 Feb 2023 00:11:08 UTC"
record: -1
